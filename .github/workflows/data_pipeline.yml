name: Deploy AWS CDK

on:
  workflow_dispatch: # Manual trigger

jobs:
  aws_cdk:
    name: Deploy AWS CDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1  # Replace with your AWS region

      - name: push docker image for lambda
        run: | 
          export REPO_NAME="data_pipeline_repo"
          export AWS_ACCOUNT_NUMBER="${{ secrets.AWS_ACCOUNT_ID }}"
          echo "Using ECR Account: $AWS_ACCOUNT_NUMBER"
          export DOCKER_REGISTRY=${AWS_ACCOUNT_NUMBER}.dkr.ecr.us-east-1.amazonaws.com
          echo "Preparing AWS CLI"
          aws ecr describe-repositories --repository-names $REPO_NAME || aws ecr create-repository --repository-name $REPO_NAME  
          aws ecr put-lifecycle-policy --repository-name $REPO_NAME --lifecycle-policy-text file://ecr_lifecycle_policy.json

          sudo apt-get update
          sudo apt install curl wget unzip -y
          aws --version
          docker info
          docker --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region "us-east-1"
          aws ecr get-login-password --region "us-east-1" | docker login --username AWS --password-stdin $DOCKER_REGISTRY

          echo "Current Working Directory: $(pwd) Starting building ecr image..."
          export DATA_PIPELINE_DIR="src/lambda"
          export DATA_PIPELINE_IMAGE_NAME="automated_data_pipeline"
          echo Building_and_pushing_image $DATA_PIPELINE_IMAGE_NAME
          docker build --platform linux/amd64 -t $DATA_PIPELINE_IMAGE_NAME $DATA_PIPELINE_DIR
          docker tag $DATA_PIPELINE_IMAGE_NAME:latest $DOCKER_REGISTRY/$REPO_NAME:$DATA_PIPELINE_IMAGE_NAME
          docker push $DOCKER_REGISTRY/$REPO_NAME:$DATA_PIPELINE_IMAGE_NAME
      
      - name: Install npm
        run: 'sudo apt update -y && sudo apt install nodejs npm -y'

      - name: Install AWS CDK
        run: 'sudo npm install -g aws-cdk'

      - name: Install requirements
        run: pip install -r requirements.txt

      - name: Synthesize CDK application
        run: cdk synth

      - name: Bootstrap CDK
        run: cdk bootstrap

      - name: Deploy application
        run: cdk deploy --require-approval never  # Adjust deployment options as needed
